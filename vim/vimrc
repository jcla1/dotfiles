" The encoding displayed and encoding written to file.
set encoding=utf-8 fileencoding=utf-8
scriptencoding utf-8

let mapleader = ','

set number nocompatible
set nowrap textwidth=80

" For whatever reason, since upgrading to Vim 8.2, if backspace isn't set it
" will behave in Vi compatible fashion and prevent you from backspacing over
" basically anything.
set backspace=indent,eol,start

set hlsearch incsearch smartcase
" Quickly get rid of search highlighting again.
nnoremap <leader>h :noh<cr>

set smarttab expandtab
set smartindent autoindent
set softtabstop=2 shiftwidth=2

" Don't show the mode we're in in the statusline, as that's now supposed to be
" handled by lightline.
set noshowmode

set mouse=a

" Setup Vim command completion in the status line.
set wildmode=longest,list,full
set wildmenu

" Stop the beeping.
set visualbell t_vb=

" Tell Vim to use the system clipboard. When yanking something to the default
" register you're able to Ctrl-v it in another program and vice versa with
" pasting.
" set clipboard=unnamedplus

" Fold sections enclosed in {{{ ... }}}. The folds can be toggled with: za.
" Also foldcolumn enables to toggle folds using the mouse.
set foldmethod=marker foldcolumn=1

set completeopt=menuone,menu,longest

" Deal with how Vim handles swap/undo/backup files.
" {{{
" Protect changes between writes. Default values of updatecount (200 keystrokes)
" and uptime (4 seconds) are fine.
" see: https://begriffs.com/posts/2019-07-19-history-use-vim.html
set swapfile
set directory^=~/.vim/swap//

" protect against crash-during-write
set writebackup
" but do not persist backup after successful write
set nobackup
" use rename-and-write-new method whenever safe
set backupcopy=auto
" patch required to honor double slash at end
if has('patch-8.1.0251')
  " consolidate the writebackups -- not a big
  " deal either way, since they usually get deleted
  set backupdir^=~/.vim/backup//
end

" persist the undo tree for each file
set undofile
set undodir^=~/.vim/undo//
" }}}

" UNIX style files don't have a UTF-8 BOM, so remove it if there is one/be
" explicit that we're not using BOMs.
set nobomb

" When splitting windows open then below/to the right of current window.
set splitbelow splitright

" Keep buffers even when they are 'abandoned'.
set hidden

" Allow Vim to remove comment markers when joining lines.
set formatoptions+=j

syntax enable
filetype plugin indent on
" termguicolors tells Vim to use the more feature full termfg/termbg/etc colours
" rather than the ctermfg/ctermbg/etc based ones. Allows one to use hex-colours
" for example.
set background=dark termguicolors

" Tell Vim to use the background colour when clearing parts of the screen.
" Without this option set to blank you may find that (in tmux) only the
" background of actual text will have the correct background colour.
let t_ut = ""
" Make sure we're using all the colours.
let t_Co=256

" Set up Vim with the correct escape codes for the undercurl feature. These are
" taken from the suggestion in the syntax.txt help file (:h highlight-args in
" Vim 8.2.0929 and later).
let &t_Cs = "\e[4:3m"
let &t_Ce = "\e[4:0m"

" Color the 81st column magenta, iff there is a char there.
call matchadd('ColorColumn', '\%81v.\+')

highlight Folded guibg=NONE
highlight FoldColumn guibg=NONE

" Lint-errors and the like do not introduce an additional SignColumn.
set signcolumn=number

" Open the .vimrc file. When in an unnamed buffer (i.e. immediately after
" starting Vim) open the file in the existing window rather than splitting.
nnoremap <expr> <leader>ev (bufname("%") ==? "" ? ":edit" : ":split")." $MYVIMRC<cr>"
" Reload the .vimrc file. When currently editing the .vimrc file in the current
" buffer save it before reloading.
nnoremap <expr> <leader>sv (expand("%:p") ==? expand($MYVIMRC) ? ":w \|" : ":")."source $MYVIMRC<cr>"

function! s:execSelection() range abort
  let savedRegister = getreg('')
  silent normal! `<v`>y
  @"
  call setreg('', savedRegister)
endfunction

vnoremap <leader>e :call <sid>execSelection()<cr>

" Enclose current word in double quotes
nnoremap <leader>" viw<esc>a"<esc>hbi"<esc>lel
" Toggle PASTE mode by clicking with the scroll-wheel.
set pastetoggle=<leader>p

" Set navigation keys that keep us on the home row.
nnoremap H ^
nnoremap L $
vnoremap H ^
vnoremap L $

" Prevent any use of cursor keys or esc by mapping them to 'no op'
" {{{
nnoremap <left> <nop>
nnoremap <right> <nop>
nnoremap <up> <nop>
nnoremap <down> <nop>

inoremap jk <esc>
" Don't remap <esc> in insert mode! Otherwise you'll mess up some terminal
" escape codes that will, for example, appear when trying to paste into Vim or
" when Alt-Tab'ing while in insert mode.
" inoremap <esc> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
" }}}

" Shortcut to rapidly toggle `set list`
set listchars=tab:»\ ,trail:.,eol:¬,space:·
nmap <leader>l :set list!<cr>

" We need to set both the NonText and SpecialKey highlight. The NonText part
" handles colour for things like the eol marker (in listchars) whereas
" SpecialKey would highlight space.
highlight NonText guifg=DarkGrey
highlight SpecialKey guifg=DarkGrey

set fillchars+=stl:\ ,stlnc:\
" Force Vim to always show status line
set laststatus=2

" Shortcuts to (de-)activate the spell-checking.
nnoremap <f5> :set spell! spelllang=en_gb<cr>
nnoremap <f6> :set spelllang=de_20<cr>
" Since for the Vim built-in spell-checker there's only an insert-mode popup we
" need to get there from normal-mode.
nnoremap <leader>k ea<c-x><c-s>
" Make navigation of the spell-check pop-up-menu (pum) easier. We're using u/i
" to navigate up/down (instead of the usual j/k) which is slightly awkward,
" because jk is used to exit insert mode.
inoremap <expr> u pumvisible() ? "\<C-n>" : "u"
inoremap <expr> i pumvisible() ? "\<C-p>" : "i"
inoremap <expr> <enter> pumvisible() ? "\<esc>" : "\<enter>"

" Don't show the underscores and asterisks in markdown (or other that support
" it) files that style the text.
set concealcursor= conceallevel=2

" --- Third-party plugin config from here on ---
let g:ale_linters = {
\  'c':   ['clangd'],
\  'cpp': ['clangd'],
\  'sh':  ['shellcheck'],
\  'vim': ['vint'],
\}
" Only run those linters defined above, and no more!
let g:ale_linters_explicit = 1

let g:ale_echo_msg_info_str = 'I'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%] %[code]%'

let g:ale_default_navigation = 'split'

let g:ale_fixers = {
\  'c':   ['clangtidy', 'clang-format'],
\  'cpp': ['clangtidy', 'clang-format'],
\  'sh':  ['shfmt'],
\  '*':   ['remove_trailing_lines', 'trim_whitespace'],
\}
let g:ale_fix_on_save = 1

let g:lightline = {
\  'active': {
\    'right': [['lineinfo'], ['percent'], ['filetype']]
\  },
\}

" Limelight isn't clever enough to figure out how to darken/gray-out the
" colorscheme, so it needs some hints.
let g:limelight_conceal_guifg = 'DarkGray'

" Horrible 'bug' where goyo scrolls horizontally when going over the character
" limit, but only with whitespace. So we're seting the width large enough
" (textwidth + 2) so that we can cope with a single trailing space.
let g:goyo_width=82

" Automatically enable Limelight when Goyo is used.
augroup goyogroup
  autocmd! User GoyoEnter Limelight
  autocmd! User GoyoLeave Limelight!
  " Weird bug where quitting Goyo causes all the colours to mess up. Sourcing
  " vimrc helps. This issue started when dropping the colorscheme in Vim and
  " relying on styling from the terminal.
  autocmd! User GoyoLeave source $MYVIMRC
augroup end

let g:vimwiki_list = [{'path': '~/sciebo/wiki', 'syntax': 'markdown'}]
command! Diary VimwikiDiaryIndex
augroup vimwikigroup
    autocmd!
    " automatically update links on read diary
    autocmd BufRead,BufNewFile diary.wiki VimwikiDiaryGenerateLinks
augroup end

" Load all plugins now so that we can have the ALE help tags.
" Plugins need to be added to runtimepath before helptags can be generated.
packloadall
" Load all of the helptags now, after plugins have been loaded.
" All messages and errors will be ignored.
silent! helptags ALL
